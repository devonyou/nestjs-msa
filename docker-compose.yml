services:
    gateway:
        build:
            context: .
            dockerfile: ./apps/gateway/Dockerfile
            target: development
        ports:
            - '3000:3000'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        env_file:
            - ./apps/gateway/.env
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        depends_on:
            user:
                condition: service_started
            product:
                condition: service_started
            order:
                condition: service_started
            payment:
                condition: service_started
            notification:
                condition: service_started

    user:
        build:
            context: .
            dockerfile: ./apps/user/Dockerfile
            target: development
        ports:
            - '3001:3000'
        expose:
            - '3000'
            - '3010'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        env_file:
            - ./apps/user/.env

        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy

    product:
        build:
            context: .
            dockerfile: ./apps/product/Dockerfile
            target: development
        expose:
            - '3000'
            - '3010'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        env_file:
            - ./apps/product/.env

        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy

    order:
        build:
            context: .
            dockerfile: ./apps/order/Dockerfile
            target: development
        expose:
            - '3000'
            - '3010'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        env_file:
            - ./apps/order/.env

        depends_on:
            mysql:
                condition: service_healthy
            redis:
                condition: service_healthy
            # rabbitmq:
            #     condition: service_healthy
    payment:
        build:
            context: .
            dockerfile: ./apps/payment/Dockerfile
            target: development
        expose:
            - '3000'
            - '3010'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        env_file:
            - ./apps/payment/.env

        depends_on:
            mysql:
                condition: service_healthy

    notification:
        build:
            context: .
            dockerfile: ./apps/notification/Dockerfile
            target: development
        expose:
            - '3000'
            - '3010'
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        env_file:
            - ./apps/notification/.env
        depends_on:
            redis:
                condition: service_healthy
            # rabbitmq:
            #     condition: service_healthy

    mysql:
        image: mysql:8.4
        platform: linux/amd64
        ports:
            - '3306:3306'
        volumes:
            - ./mysql/data:/var/lib/mysql
            - ./mysql/my.cnf:/etc/mysql/my.cnf
        healthcheck:
            test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-ppass1234']
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 5s
        environment:
            TZ: Asia/Seoul
            MYSQL_ROOT_PASSWORD: pass1234

    redis:
        image: redis:7-alpine
        ports:
            - '6379:6379'
        volumes:
            - ./redis/data:/data
        restart: always
        command: redis-server --appendonly yes --requirepass pass1234
        healthcheck:
            test: ['CMD', 'redis-cli', '-a', 'pass1234', 'ping']
            interval: 5s
            timeout: 3s
            retries: 5

    redis-insight:
        image: redis/redisinsight:latest
        restart: always
        ports:
            - 5540:5540
        volumes:
            - ./redis-insight:/db
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:5540']
            interval: 5s
            timeout: 3s
            retries: 5
        depends_on:
            redis:
                condition: service_healthy

    rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
            - '5672:5672'
            - '15672:15672'
        environment:
            - RABBITMQ_DEFAULT_USER=admin
            - RABBITMQ_DEFAULT_PASS=pass1234
        volumes:
            - ./rabbitmq/data:/var/lib/rabbitmq
        healthcheck:
            # test: ['CMD', 'rabbitmq-diagnostics', 'check_port_connectivity']
            # test: ['CMD', 'rabbitmqctl', 'status']
            interval: 5s
            timeout: 3s
            retries: 5
        restart: unless-stopped
