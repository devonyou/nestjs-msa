// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/user.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export enum UserRole {
  USER = 0,
  ADMIN = 1,
  UNRECOGNIZED = -1,
}

export interface User {
  id: number;
  provider: string;
  providerId: string;
  role: UserRole;
  name: string;
  email: string;
  avatarUrl: string;
  emailVerified: boolean;
  version: number;
}

export interface VerifyTokenRequest {
  token: string;
  isRefresh: boolean;
}

export interface VerifyTokenResponse {
  verify: boolean;
  user: User | undefined;
}

export interface RefreshTokenRequest {
  userId: number;
}

export interface RefreshTokenResponse {
  accessToken: string;
  refreshToken: string;
}

export interface GetUserInfoByUserIdRequest {
  id: number;
}

export interface UpdateUserInfoRequest {
  id: number;
  name?: string | undefined;
  avatarUrl?: string | undefined;
  role?: UserRole | undefined;
}

export interface UpdateUserInfoResponse {
  user: User | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  verifyToken(request: VerifyTokenRequest, metadata?: Metadata): Observable<VerifyTokenResponse>;

  refreshToken(request: RefreshTokenRequest, metadata?: Metadata): Observable<RefreshTokenResponse>;

  getUserInfoByUserId(request: GetUserInfoByUserIdRequest, metadata?: Metadata): Observable<User>;

  updateUserInfo(request: UpdateUserInfoRequest, metadata?: Metadata): Observable<User>;
}

export interface UserServiceController {
  verifyToken(
    request: VerifyTokenRequest,
    metadata?: Metadata,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;

  refreshToken(
    request: RefreshTokenRequest,
    metadata?: Metadata,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  getUserInfoByUserId(
    request: GetUserInfoByUserIdRequest,
    metadata?: Metadata,
  ): Promise<User> | Observable<User> | User;

  updateUserInfo(request: UpdateUserInfoRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["verifyToken", "refreshToken", "getUserInfoByUserId", "updateUserInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
