// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/order.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "order";

export enum OrderStatus {
  CREATED = 0,
  STOCK_RESERVED = 1,
  PAYMENT_PENDING = 2,
  PAYMENT_SUCCESS = 3,
  PAYMENT_FAILED = 4,
  CANCELED = 5,
  SHIPPED = 6,
  COMPLETED = 7,
  UNRECOGNIZED = -1,
}

export interface OrderResponse {
  id: string;
  userId: string;
  orderItems: OrderItem[];
  status: OrderStatus;
  totalAmount: number;
  paymentId: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface OrderListResponse {
  orders: OrderResponse[];
}

export interface OrderItem {
  id: string;
  productId: string;
  quantity: number;
  price: number;
}

export interface CreateOrderRequest {
  userId: string;
  items: OrderItemInput[];
}

export interface OrderItemInput {
  productId: string;
  quantity: number;
  price: number;
}

export interface GetOrderByIdRequest {
  orderId: string;
}

export interface GetOrdersByUserIdRequest {
  userId: string;
}

export interface UpdateOrderStatusRequest {
  orderId: string;
  status: OrderStatus;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest, metadata?: Metadata): Observable<OrderResponse>;

  getOrderById(request: GetOrderByIdRequest, metadata?: Metadata): Observable<OrderResponse>;

  getOrdersByUserId(request: GetOrdersByUserIdRequest, metadata?: Metadata): Observable<OrderListResponse>;

  updateOrderStatus(request: UpdateOrderStatusRequest, metadata?: Metadata): Observable<OrderResponse>;
}

export interface OrderServiceController {
  createOrder(
    request: CreateOrderRequest,
    metadata?: Metadata,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrderById(
    request: GetOrderByIdRequest,
    metadata?: Metadata,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrdersByUserId(
    request: GetOrdersByUserIdRequest,
    metadata?: Metadata,
  ): Promise<OrderListResponse> | Observable<OrderListResponse> | OrderListResponse;

  updateOrderStatus(
    request: UpdateOrderStatusRequest,
    metadata?: Metadata,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrderById", "getOrdersByUserId", "updateOrderStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
