// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/product.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "product";

export interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  images: ProductImage[];
  category: Category | undefined;
}

export interface ProductImage {
  id?: number | undefined;
  url: string;
  main?: boolean | undefined;
  productId?: number | undefined;
}

export interface ProductResponse {
  id: number;
  name: string;
  description: string;
  price: number;
  images: ProductImage[];
  category: CategoryResponse | undefined;
  createdAt: string;
  updatedAt: string;
}

export interface ProductListResponse {
  products: ProductResponse[];
  total: number;
}

export interface CreateProductRequest {
  name: string;
  description: string;
  price: number;
  categoryId: number;
  images: ProductImage[];
}

export interface GetProductsRequest {
  page: number;
  limit: number;
  sort: string;
  categoryId?: number | undefined;
  name?: string | undefined;
}

export interface GetProductByIdRequest {
  id: number;
}

export interface UpdateProductRequest {
  id: number;
  name?: string | undefined;
  description?: string | undefined;
  price?: number | undefined;
  categoryId?: number | undefined;
  images: ProductImage[];
}

export interface DeleteProductRequest {
  id: number;
}

export interface Category {
  id: number;
  name: string;
  description?: string | undefined;
  parentId?: number | undefined;
}

export interface CategoryResponse {
  id: number;
  name: string;
  description: string;
  parent?: Category | undefined;
  children: Category[];
  products: ProductResponse[];
}

export interface CategoryListResponse {
  categories: CategoryResponse[];
}

export interface CreateCategoryRequest {
  name: string;
  description?: string | undefined;
  parentId?: number | undefined;
}

export interface UpdateCategoryRequest {
  id: number;
  name?: string | undefined;
  description?: string | undefined;
  parentId?: number | undefined;
}

export interface DeleteCategoryRequest {
  id: number;
}

export interface GetCategoryByIdRequest {
  id: number;
}

export interface GeneratePresignedUrlRequest {
  contentType: string;
}

export interface GeneratePresignedUrlResponse {
  presignedUrl: string;
  filename: string;
  fileUrl: string;
}

export interface Inventory {
  id: number;
  productId: string;
  quantity: number;
}

export interface InventoryResponse {
  inventory: Inventory | undefined;
}

export interface GetInventoryByProductIdRequest {
  productId: string;
}

export interface UpdateInventoryQuantityRequest {
  inventoryId: string;
  quantity: number;
}

export interface InventoryLog {
  id: number;
  inventoryId: string;
  changeType: string;
  quantityChanged: number;
  reason: string;
  createdAt: Timestamp | undefined;
}

export interface GetInventoryLogsRequest {
  inventoryId: string;
}

export interface InventoryLogListResponse {
  logs: InventoryLog[];
}

export interface StockReservation {
  id: number;
  inventoryId: string;
  reservedQty: number;
  expiresAt: Timestamp | undefined;
  orderId?: string | undefined;
}

export interface CreateStockReservationRequest {
  inventoryId: string;
  reservedQty: number;
  orderId: string;
}

export interface ReleaseStockReservationRequest {
  id: number;
}

export interface ConfirmStockReservationRequest {
  id: number;
}

export interface StockReservationResponse {
  reservation: StockReservation | undefined;
}

export interface Empty {
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  /** product */

  createProduct(request: CreateProductRequest, metadata?: Metadata): Observable<ProductResponse>;

  getProducts(request: GetProductsRequest, metadata?: Metadata): Observable<ProductListResponse>;

  getProductById(request: GetProductByIdRequest, metadata?: Metadata): Observable<ProductResponse>;

  updateProduct(request: UpdateProductRequest, metadata?: Metadata): Observable<ProductResponse>;

  deleteProduct(request: DeleteProductRequest, metadata?: Metadata): Observable<Empty>;

  /** category */

  createCategory(request: CreateCategoryRequest, metadata?: Metadata): Observable<CategoryResponse>;

  getAllCategories(request: Empty, metadata?: Metadata): Observable<CategoryListResponse>;

  getCategoryById(request: GetCategoryByIdRequest, metadata?: Metadata): Observable<CategoryResponse>;

  updateCategory(request: UpdateCategoryRequest, metadata?: Metadata): Observable<CategoryResponse>;

  deleteCategory(request: DeleteCategoryRequest, metadata?: Metadata): Observable<Empty>;

  /** presigned url */

  generatePresignedUrl(
    request: GeneratePresignedUrlRequest,
    metadata?: Metadata,
  ): Observable<GeneratePresignedUrlResponse>;

  /** inventory */

  getInventoryByProductId(request: GetInventoryByProductIdRequest, metadata?: Metadata): Observable<InventoryResponse>;

  increaseInventory(request: UpdateInventoryQuantityRequest, metadata?: Metadata): Observable<InventoryResponse>;

  decreaseInventory(request: UpdateInventoryQuantityRequest, metadata?: Metadata): Observable<InventoryResponse>;

  getInventoryLogs(request: GetInventoryLogsRequest, metadata?: Metadata): Observable<InventoryLogListResponse>;

  /** stock reservation */

  createStockReservation(
    request: CreateStockReservationRequest,
    metadata?: Metadata,
  ): Observable<StockReservationResponse>;

  releaseStockReservation(request: ReleaseStockReservationRequest, metadata?: Metadata): Observable<Empty>;

  confirmStockReservation(request: ConfirmStockReservationRequest, metadata?: Metadata): Observable<InventoryResponse>;
}

export interface ProductServiceController {
  /** product */

  createProduct(
    request: CreateProductRequest,
    metadata?: Metadata,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  getProducts(
    request: GetProductsRequest,
    metadata?: Metadata,
  ): Promise<ProductListResponse> | Observable<ProductListResponse> | ProductListResponse;

  getProductById(
    request: GetProductByIdRequest,
    metadata?: Metadata,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  updateProduct(
    request: UpdateProductRequest,
    metadata?: Metadata,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  deleteProduct(request: DeleteProductRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  /** category */

  createCategory(
    request: CreateCategoryRequest,
    metadata?: Metadata,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getAllCategories(
    request: Empty,
    metadata?: Metadata,
  ): Promise<CategoryListResponse> | Observable<CategoryListResponse> | CategoryListResponse;

  getCategoryById(
    request: GetCategoryByIdRequest,
    metadata?: Metadata,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateCategory(
    request: UpdateCategoryRequest,
    metadata?: Metadata,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  deleteCategory(request: DeleteCategoryRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  /** presigned url */

  generatePresignedUrl(
    request: GeneratePresignedUrlRequest,
    metadata?: Metadata,
  ): Promise<GeneratePresignedUrlResponse> | Observable<GeneratePresignedUrlResponse> | GeneratePresignedUrlResponse;

  /** inventory */

  getInventoryByProductId(
    request: GetInventoryByProductIdRequest,
    metadata?: Metadata,
  ): Promise<InventoryResponse> | Observable<InventoryResponse> | InventoryResponse;

  increaseInventory(
    request: UpdateInventoryQuantityRequest,
    metadata?: Metadata,
  ): Promise<InventoryResponse> | Observable<InventoryResponse> | InventoryResponse;

  decreaseInventory(
    request: UpdateInventoryQuantityRequest,
    metadata?: Metadata,
  ): Promise<InventoryResponse> | Observable<InventoryResponse> | InventoryResponse;

  getInventoryLogs(
    request: GetInventoryLogsRequest,
    metadata?: Metadata,
  ): Promise<InventoryLogListResponse> | Observable<InventoryLogListResponse> | InventoryLogListResponse;

  /** stock reservation */

  createStockReservation(
    request: CreateStockReservationRequest,
    metadata?: Metadata,
  ): Promise<StockReservationResponse> | Observable<StockReservationResponse> | StockReservationResponse;

  releaseStockReservation(
    request: ReleaseStockReservationRequest,
    metadata?: Metadata,
  ): Promise<Empty> | Observable<Empty> | Empty;

  confirmStockReservation(
    request: ConfirmStockReservationRequest,
    metadata?: Metadata,
  ): Promise<InventoryResponse> | Observable<InventoryResponse> | InventoryResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createProduct",
      "getProducts",
      "getProductById",
      "updateProduct",
      "deleteProduct",
      "createCategory",
      "getAllCategories",
      "getCategoryById",
      "updateCategory",
      "deleteCategory",
      "generatePresignedUrl",
      "getInventoryByProductId",
      "increaseInventory",
      "decreaseInventory",
      "getInventoryLogs",
      "createStockReservation",
      "releaseStockReservation",
      "confirmStockReservation",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
