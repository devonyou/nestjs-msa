// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/payment.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payment";

export enum PaymentStatus {
  PENDING = 0,
  SUCCESS = 1,
  FAILED = 2,
  CANCELED = 3,
  UNRECOGNIZED = -1,
}

export interface Payment {
  id: number;
  orderId: string;
  userId: number;
  amount: number;
  status: PaymentStatus;
  provider: string;
  providerPaymentId: string;
  createdAt: string;
  updatedAt: string;
}

export interface PaymentResponse {
  id: number;
  orderId: string;
  userId: number;
  amount: number;
  status: PaymentStatus;
  provider: string;
  providerPaymentId: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreatePaymentRequest {
  orderId: string;
  userId: number;
  amount: number;
  provider: string;
}

export interface ConfirmPaymentRequest {
  paymentId: number;
  providerPaymentId: string;
}

export interface CancelPaymentRequest {
  paymentId: number;
}

export interface FailPaymentRequest {
  paymentId: number;
}

export interface Empty {
}

export const PAYMENT_PACKAGE_NAME = "payment";

export interface PaymentServiceClient {
  createPayment(request: CreatePaymentRequest, metadata?: Metadata): Observable<PaymentResponse>;

  confirmPayment(request: ConfirmPaymentRequest, metadata?: Metadata): Observable<PaymentResponse>;

  cancelPayment(request: CancelPaymentRequest, metadata?: Metadata): Observable<PaymentResponse>;

  failPayment(request: FailPaymentRequest, metadata?: Metadata): Observable<PaymentResponse>;
}

export interface PaymentServiceController {
  createPayment(
    request: CreatePaymentRequest,
    metadata?: Metadata,
  ): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;

  confirmPayment(
    request: ConfirmPaymentRequest,
    metadata?: Metadata,
  ): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;

  cancelPayment(
    request: CancelPaymentRequest,
    metadata?: Metadata,
  ): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;

  failPayment(
    request: FailPaymentRequest,
    metadata?: Metadata,
  ): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPayment", "confirmPayment", "cancelPayment", "failPayment"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
